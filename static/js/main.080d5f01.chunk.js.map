{"version":3,"sources":["Components/Alert.js","Components/Navbar.js","Components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","word","alert","className","type","role","charAt","toUpperCase","slice","msg","Navbar","mode","href","title","id","about","onClick","toggleModeBlue","style","marginRight","htmlFor","toggleModeYellow","toggleModeDarkBlue","TextForm","useState","text","setText","backgroundColor","textFormColor","color","textColor","heading","rows","value","placeholder","onChange","event","target","buttonColor","showAlert","toLowerCase","replace","navigator","clipboard","writeText","words","wordsArray","split","count","forEach","element","numberOfWords","length","defaultProps","App","setMode","setAlert","setTextFormColor","setbuttonColor","settextColor","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.080d5f01.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Alert(props) {\r\n\r\n  const Capitalise=(word)=>{\r\n        return word.charAt(0).toUpperCase()+word.slice(1);\r\n  }\r\n  return (\r\n    props.alert && (\r\n      <div>\r\n        <div\r\n          className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n          role=\"alert\"\r\n        >\r\n          <strong>{Capitalise(props.alert.type)}</strong>: {props.alert.msg}\r\n        </div>\r\n      </div>\r\n    )\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <>\r\n      <nav\r\n        className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n      >\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"/\">\r\n            {props.title}\r\n          </a>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">\r\n                  Home\r\n                </a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"/\">\r\n                  {props.about}\r\n                </a>\r\n              </li>\r\n            </ul>\r\n            <div className={`form-check form-switch text-${props.mode===\"dark\"?\"light\":\"dark\"}`} >\r\n              <input\r\n                className=\"form-check-input\"\r\n                type=\"checkbox\"\r\n                id=\"flexSwitchCheckChecked\"\r\n                onClick={props.toggleModeBlue}\r\n              />\r\n              <label className=\"form-check-label\" style={{marginRight:\"10px\"}} htmlFor=\"flexSwitchCheckChecked\">\r\n                Enable Blue Mode\r\n              </label>\r\n            </div>\r\n            <div className={`form-check form-switch text-${props.mode===\"dark\"?\"light\":\"dark\"}`} >\r\n              <input\r\n                className=\"form-check-input\"\r\n                type=\"checkbox\"\r\n                id=\"flexSwitchCheckChecked\"\r\n                onClick={props.toggleModeYellow}\r\n              />\r\n              <label className=\"form-check-label\" style={{marginRight:\"10px\"}} htmlFor=\"flexSwitchCheckChecked\">\r\n                Enable Yellow Mode\r\n              </label>\r\n            </div>\r\n            <div className={`form-check form-switch text-${props.mode===\"dark\"?\"light\":\"dark\"}`} >\r\n              <input\r\n                className=\"form-check-input\"\r\n                type=\"checkbox\"\r\n                id=\"flexSwitchCheckChecked\"\r\n                onClick={props.toggleModeDarkBlue}\r\n              />\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckChecked\">\r\n                Enable Dark Blue Mode\r\n              </label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  about: PropTypes.string.isRequired,\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  title: \"Set title here\",\r\n  about: \"Set About here\",\r\n};\r\n","import React, {useState} from \"react\";\r\nexport default function TextForm(props) {\r\n  const [text, setText] = useState(\"\");\r\n\r\n  const handleUpClick = ()=>{\r\n      setText(text.toUpperCase());\r\n      props.showAlert(\"The text has been Uppercased\", \"success\");\r\n\r\n  }\r\n  \r\n  const handleOnChange = (event)=>{\r\n          setText(event.target.value);\r\n  }\r\n\r\n  const handleDownlick = () =>{\r\n    setText(text.toLowerCase());\r\n    props.showAlert(\"The text has been Lowercased\", \"success\");\r\n  }\r\n\r\n  const handleClearClick=()=>{\r\n      setText(\"\");\r\n      props.showAlert(\"The text has been cleared\", \"success\");\r\n  }\r\n\r\n  const handleRemoveExtraSpaces=()=>{\r\n    setText(text.replace(/ +/g, ' '))\r\n    props.showAlert(\"The extra spaces have beem removed\", \"success\");\r\n  }\r\n\r\n  const handleCopy=()=>{\r\n \r\n  /* Copy the text inside the text field */\r\n  navigator.clipboard.writeText(text);\r\n  props.showAlert(\"The text is copied to clipboard\", \"success\");\r\n  }\r\n\r\n  const numberOfWords = (words) =>{\r\n      let wordsArray = words.split(\" \");\r\n      let count = 0;\r\n      wordsArray.forEach(element => {\r\n          element!==\"\" && count++;\r\n      });\r\n      return count;\r\n  }\r\n  return (\r\n      <>\r\n    <div className=\"container\" style={{backgroundColor:props.mode===\"dark\"?props.textFormColor:\"white\",\r\n            color:props.textColor,\r\n          }}>\r\n      <div>\r\n        <div className=\"mb-3\">\r\n            <h2>\r\n            {props.heading}\r\n            </h2>\r\n          <textarea\r\n            className={\"form-control \" +(props.mode===\"light\"?\"exampleFormControlTextarea1\":\"exampleFormControlTextarea2\")} \r\n            rows=\"8\"\r\n            value={text}\r\n            placeholder = \"Enter the text here\"\r\n            onChange={handleOnChange}\r\n            style={{backgroundColor:props.mode===\"dark\"?props.textFormColor:\"white\",\r\n            color:props.textColor,\r\n           \r\n          }}\r\n            \r\n          ></textarea>\r\n        </div>\r\n      </div>\r\n        <button className={`btn btn-${props.buttonColor}`} onClick={handleUpClick}>Convert to Uppercase</button>\r\n        <button className={`btn btn-${props.buttonColor} mx-3`} onClick={handleDownlick}>Convert to Lowercase</button>\r\n        <button className={`btn btn-${props.buttonColor}`} onClick={handleClearClick}>Clear Text</button>\r\n        <button className={`btn btn-${props.buttonColor} mx-3`} onClick={handleRemoveExtraSpaces}>Remove Extra Spaces</button>\r\n        <button className={`btn btn-${props.buttonColor} mx-3`} onClick={handleCopy}>Copy text to clipboard</button>\r\n    </div>\r\n    <div className=\"container my-3\"   style={{backgroundColor:props.mode===\"dark\"?props.textFormColor:\"white\",\r\n            color:props.textColor,\r\n          }}>\r\n        <h1>Your text summary</h1>\r\n        <p>{numberOfWords(text)} words and {text.length} characters</p>\r\n        <h1>Time needed to read</h1>\r\n        <p>{text.split(\" \").length* 0.008} minutes</p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length>0?text:\"Write something to Preview\"}</p>\r\n    </div>\r\n    </>\r\n  );\r\n}\r\n","import { useState } from \"react\";\nimport \"./App.css\";\n// import About from \"./Components/About\";\nimport Alert from \"./Components/Alert\";\nimport Navbar from \"./Components/Navbar\";\nimport TextForm from \"./Components/TextForm\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nfunction App() {\n  \n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n  const [textFormColor, setTextFormColor] = useState('light');\n  const [buttonColor, setbuttonColor] = useState(\"primary\");\n  const [textColor, settextColor] = useState(\"black\")\n\n  const showAlert=(message, type)=>{\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n  const toggleModeBlue = ()=>{\n    if(mode===\"dark\")\n      {\n        document.body.style.backgroundColor=\"white\";\n        showAlert(\"The light mode has been enabled\", \"success\");\n        setbuttonColor(\"primary\");\n        settextColor(\"black\");\n      }\n      if(mode===\"light\")\n      {\n        document.body.style.backgroundColor=\"#b7eef3\";\n        showAlert(\"The dark mode has been enabled\", \"success\");\n        setTextFormColor(\"#b7eef3\");\n        setbuttonColor(\"primary\");\n        settextColor(\"black\");\n      }\n    setMode(mode === \"dark\"?\"light\":\"dark\");\n  }\n  const toggleModeYellow = ()=>{\n    if(mode===\"dark\")\n      {\n        document.body.style.backgroundColor=\"white\";\n        showAlert(\"The light mode has been enabled\", \"success\");\n        setbuttonColor(\"primary\");\n        settextColor(\"black\");\n      }\n      if(mode===\"light\")\n      {\n        document.body.style.backgroundColor=\"#f1faa9\"\n        showAlert(\"The dark mode has been enabled\", \"success\");\n        setTextFormColor(\"#f1faa9\");\n        setbuttonColor(\"success\");\n        settextColor(\"black\");\n      }\n    setMode(mode === \"dark\"?\"light\":\"dark\");\n  }\n  const toggleModeDarkBlue = ()=>{\n    if(mode===\"dark\")\n      {\n        document.body.style.backgroundColor=\"white\";\n        showAlert(\"The light mode has been enabled\", \"success\");\n        setbuttonColor(\"primary\");\n        settextColor(\"black\");\n      }\n      if(mode===\"light\")\n      {\n        document.body.style.backgroundColor=\"#042743\";\n        showAlert(\"The dark mode has been enabled\", \"success\");\n        setTextFormColor(\"#042743\");\n        setbuttonColor(\"danger\");\n        settextColor(\"white\");\n\n      }\n    setMode(mode === \"dark\"?\"light\":\"dark\");\n  }\n  return (\n    <>\n    {/* <Router> */}\n      <Navbar title=\"TextUtils\" about=\"About us\" mode={mode} toggleModeDarkBlue={toggleModeDarkBlue} toggleModeBlue={toggleModeBlue} toggleModeYellow={toggleModeYellow}/>\n      <Alert alert={alert}/>\n      {/* <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          <Route exact path=\"/\"> */}\n          <div className=\"container\">\n      <TextForm heading=\"Enter the text to analyse\" textFormColor={textFormColor} textColor={textColor} showAlert={showAlert} mode={mode} buttonColor={buttonColor}/>      \n      </div>\n          {/* </Route>\n        </Switch>\n        </Router> */}\n     \n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}